/*
 *  Copyright 2016 Google Inc. All Rights Reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.google.android.apps.forscience.whistlepunk.devicemanager;

import com.google.android.apps.forscience.whistlepunk.metadata.ExternalSensorSpec;
import com.google.common.base.Preconditions;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectableSensor {
    private ExternalSensorSpec mSpec;

    private String mConnectedSensorId;

    public static ConnectableSensor connected(ExternalSensorSpec spec, String connectedSensorId) {
        return new ConnectableSensor(spec, connectedSensorId);
    }

    public static ConnectableSensor disconnected(ExternalSensorSpec spec) {
        return new ConnectableSensor(spec, null);
    }

    /**
     * @param spec   specification of the sensor
     * @param paired non-null if we've already paired with this sensor, and so there's already a
     *               sensorId in the database for this sensor.  Otherwise, it's null; we could
     *               connect, but a sensorId would need to be created if we did
     */
    private ConnectableSensor(ExternalSensorSpec spec, String connectedSensorId) {
        mSpec = Preconditions.checkNotNull(spec);
        mConnectedSensorId = connectedSensorId;
    }

    public static Map<String, ExternalSensorSpec> makeMap(List<ConnectableSensor> sensors) {
        Map<String, ExternalSensorSpec> map = new HashMap<>();
        for (ConnectableSensor sensor : sensors) {
            map.put(sensor.getConnectedSensorId(), sensor.getSpec());
        }
        return map;
    }

    public boolean isPaired() {
        return mConnectedSensorId != null;
    }

    public ExternalSensorSpec getSpec() {
        return mSpec;
    }

    public String getName() {
        return mSpec.getName();
    }

    public String getAddress() {
        return mSpec.getAddress();
    }

    public String getConnectedSensorId() {
        return mConnectedSensorId;
    }

    @Override
    public String toString() {
        return "ConnectableSensor{" +
                "mSpec=" + mSpec +
                ", mConnectedSensorId='" + mConnectedSensorId + '\'' +
                '}';
    }

    public boolean shouldShowOptionsOnConnect() {
        return mSpec.shouldShowOptionsOnConnect();
    }

    public String getDeviceAddress() {
        return mSpec.getDeviceAddress();
    }

    // auto-generated by Android Studio
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ConnectableSensor that = (ConnectableSensor) o;

        if (!mSpec.equals(that.mSpec)) return false;
        if (mConnectedSensorId != null ? !mConnectedSensorId.equals(that.mConnectedSensorId)
                : that.mConnectedSensorId != null) {
            return false;
        }

        return true;
    }

    // auto-generated by Android Studio
    @Override
    public int hashCode() {
        int result = mSpec.hashCode();
        result = 31 * result + (mConnectedSensorId != null ? mConnectedSensorId.hashCode() : 0);
        return result;
    }
}
