package com.google.android.apps.forscience.whistlepunk.metadata;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;

import com.google.android.apps.forscience.whistlepunk.AppSingleton;
import com.google.android.apps.forscience.whistlepunk.R;
import com.google.android.apps.forscience.whistlepunk.SensorAppearance;

/**
 * A label auto-generated by a Sensor Trigger. This has some editable custom text, as well as
 * non-editable auto-generated text that is specific to the trigger which was fired.
 */
public class SensorTriggerLabel extends Label {
    private static final String TAG = "sensorTriggerLabel";
    private static final int NUM_FIELDS = 3;
    private static final int INDEX_CUSTOM_STRING = 0;
    private static final int INDEX_AUTOGEN_STRING = 1;
    private static final int INDEX_SENSOR_ID = 2;
    private static final String KEY_CUSTOM_STRING = "custom";
    private static final String KEY_AUTOGEN_STRING = "auto";
    private static final String KEY_SENSOR_ID = "sensorId";

    public SensorTriggerLabel(String labelId, String startLabelId, long timestamp,
            GoosciLabelValue.LabelValue value) {
        super(labelId, startLabelId, timestamp, value);
    }

    public SensorTriggerLabel(String labelId, String startLabelId, long timestampMs,
            SensorTrigger trigger, Context context) {
        this(labelId, startLabelId, timestampMs, createLabelValue(trigger, context));
    }

    private SensorTriggerLabel() {
        super();
    }

    public void setCustomText(String text) {
        GoosciLabelValue.LabelValue value = getValue();
        if (value == null || value.data.length == 0) {
            createDataFields(value);
        }
        value.data[INDEX_CUSTOM_STRING].key = KEY_CUSTOM_STRING;
        value.data[INDEX_CUSTOM_STRING].value = text;
        setValue(value);
    }

    public String getCustomText() {
        return getCustomText(getValue());
    }

    public static String getCustomText(GoosciLabelValue.LabelValue value) {
        if (value.data.length > INDEX_CUSTOM_STRING &&
                TextUtils.equals(value.data[INDEX_CUSTOM_STRING].key, KEY_CUSTOM_STRING)) {
            return value.data[INDEX_CUSTOM_STRING].value;
        }
        return "";
    }

    public String getAutogenText() {
        return getAutogenText(getValue());
    }

    public static String getAutogenText(GoosciLabelValue.LabelValue value) {
        if (value.data.length > INDEX_AUTOGEN_STRING &&
                TextUtils.equals(value.data[INDEX_AUTOGEN_STRING].key, KEY_AUTOGEN_STRING)) {
            return value.data[INDEX_AUTOGEN_STRING].value;
        }
        return "";
    }

    public String getSensorId() {
        return getSensorId(getValue());
    }

    public static String getSensorId(GoosciLabelValue.LabelValue value) {
        if (value.data.length > INDEX_SENSOR_ID &&
                TextUtils.equals(value.data[INDEX_SENSOR_ID].key, KEY_SENSOR_ID)) {
            return value.data[INDEX_SENSOR_ID].value;
        }
        return "";
    }

    private static GoosciLabelValue.LabelValue createLabelValue(SensorTrigger trigger,
            Context context) {
        GoosciLabelValue.LabelValue value = new GoosciLabelValue.LabelValue();
        createDataFields(value);
        value.data[INDEX_CUSTOM_STRING].key = KEY_CUSTOM_STRING;
        value.data[INDEX_CUSTOM_STRING].value = trigger.getNoteText();

        value.data[INDEX_AUTOGEN_STRING].key = KEY_AUTOGEN_STRING;
        value.data[INDEX_AUTOGEN_STRING].value = generateAutoNoteText(trigger, context);

        value.data[INDEX_SENSOR_ID].key = KEY_SENSOR_ID;
        value.data[INDEX_SENSOR_ID].value = trigger.getSensorId();
        return value;
    }

    private static void createDataFields(GoosciLabelValue.LabelValue value) {
        value.data = new GoosciLabelValue.LabelValue.DataEntry[NUM_FIELDS];
        value.data[INDEX_CUSTOM_STRING] = new GoosciLabelValue.LabelValue.DataEntry();
        value.data[INDEX_AUTOGEN_STRING] = new GoosciLabelValue.LabelValue.DataEntry();
        value.data[INDEX_SENSOR_ID] = new GoosciLabelValue.LabelValue.DataEntry();
    }

    private static String generateAutoNoteText(SensorTrigger trigger,
            Context context) {
        SensorAppearance appearance = AppSingleton.getInstance(context)
                .getSensorAppearanceProvider().getAppearance(trigger.getSensorId());
        String units = appearance.getUnits(context);
        String sensorName = appearance.getName(context);
        String triggerWhenText = context.getResources().getStringArray(
                R.array.trigger_when_list_note_text)[trigger.getTriggerWhen()];
        return context.getResources().getString(R.string.trigger_label_auto_text, sensorName,
                triggerWhenText, trigger.getValueToTrigger(), units);
    }

    @Override
    public String getTag() {
        return TAG;
    }

    public static boolean isTag(String type) {
        return TextUtils.equals(type, TAG);
    }

    @Override
    public boolean canEditTimestamp() {
        // Autogenerated label has uneditable timestamp.
        return false;
    }

    public static final Parcelable.Creator<SensorTriggerLabel> CREATOR =
            new Parcelable.Creator<SensorTriggerLabel>() {
                public SensorTriggerLabel createFromParcel(Parcel in) {
                    SensorTriggerLabel label = new SensorTriggerLabel();
                    label.populateFromParcel(in);
                    return label;
                }

                @Override
                public SensorTriggerLabel[] newArray(int size) {
                    return new SensorTriggerLabel[size];
                }
            };
}
